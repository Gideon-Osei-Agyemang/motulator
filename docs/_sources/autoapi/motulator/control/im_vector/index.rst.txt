:py:mod:`motulator.control.im_vector`
=====================================

.. py:module:: motulator.control.im_vector

.. autoapi-nested-parse::

   This module contains vector control methods for an induction motor drive.

   The algorithms are written based on the inverse-Γ model.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   motulator.control.im_vector.InductionMotorVectorCtrlPars
   motulator.control.im_vector.InductionMotorVectorCtrl
   motulator.control.im_vector.CurrentRef
   motulator.control.im_vector.CurrentCtrl
   motulator.control.im_vector.SensorlessObserver
   motulator.control.im_vector.Observer




.. py:class:: InductionMotorVectorCtrlPars

   
   Vector control parameters for an induction motor drive.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: w_m_ref
      :annotation: :collections.abc.Callable[[float], float]

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: sensorless
      :annotation: :bool = True

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: T_s
      :annotation: :float = 0.00025

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: delay
      :annotation: :int = 1

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: alpha_c
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: alpha_o
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: alpha_s
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: tau_M_max
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: i_s_max
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: psi_R_nom
      :annotation: :float = 0.9

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: u_dc_nom
      :annotation: :float = 540

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: R_s
      :annotation: :float = 3.7

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: R_R
      :annotation: :float = 2.1

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_sgm
      :annotation: :float = 0.021

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_M
      :annotation: :float = 0.224

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: p
      :annotation: :int = 2

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: J
      :annotation: :float = 0.015

      
















      ..
          !! processed by numpydoc !!


.. py:class:: InductionMotorVectorCtrl(pars=InductionMotorVectorCtrlPars())

   Bases: :py:obj:`motulator.control.common.Datalogger`

   Vector control for an induction motor drive.

   This class interconnects the subsystems of the control system and
   provides the interface to the solver.

   :param pars: Control parameters.
   :type pars: InductionMotorVectorControlPars

   ..
       !! processed by numpydoc !!

   .. py:method:: __call__(self, i_s_abc, u_dc, *args)

      
      Main control loop.

      :param i_s_abc: Phase currents.
      :type i_s_abc: ndarray, shape (3,)
      :param u_dc: DC-bus voltage.
      :type u_dc: float
      :param w_M: Rotor speed (in mechanical rad/s), only for the sensored control.
      :type w_M: float, optional

      :returns: * **d_abc_ref** (*ndarray, shape (3,)*) -- Duty ratio references.
                * **T_s** (*float*) -- Sampling period.















      ..
          !! processed by numpydoc !!

   .. py:method:: __repr__(self)

      
      Return repr(self).
















      ..
          !! processed by numpydoc !!


.. py:class:: CurrentRef(pars)

   Current reference calculation.

   This method includes field-weakenting operation based on the unlimited
   voltage reference feedback. The breakdown torque and current limits are
   taken into account.

   .. rubric:: Notes

   The field-weakening method and its tuning corresponds roughly to [1]_.

   .. rubric:: References

   .. [1] Hinkkanen, Luomi, "Braking scheme for vector-controlled induction
      motor drives equipped with diode rectifier without braking resistor,"
      IEEE Trans. Ind. Appl., 2006, https://doi.org/10.1109/TIA.2006.880852

   :param pars: Control parameters.
   :type pars: InductionMotorVectorCtrlPars (or its subset)
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, tau_M_ref, psi_R)

      
      Compute the stator current reference.

      :param tau_M_ref: Torque reference.
      :type tau_M_ref: float
      :param psi_R: Rotor flux magnitude.
      :type psi_R: float

      :returns: * **i_s_ref** (*complex*) -- Stator current reference.
                * **tau_M** (*float*) -- Limited torque reference.















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, u_s_ref, u_dc)

      
      Field-weakening based on the unlimited reference voltage.

      :param u_s_ref: Unlimited stator voltage reference.
      :type u_s_ref: complex
      :param u_dc: DC-bus voltage.
      :type u_dc: float















      ..
          !! processed by numpydoc !!


.. py:class:: CurrentCtrl(pars)

   2DOF PI current controller.

   This controller corresponds to [2]_. The continuous-time complex-vector
   design corresponding to (13) is used here. The rotor flux linkage is
   considered as a quasi-constant disturbance. This design could be
   equivalently presented as a 2DOF PI controller.

   .. rubric:: Notes

   This implementation does not take the magnetic saturation into account.

   .. rubric:: References

   .. [2] Awan, Saarakkala, Hinkkanen, "Flux-linkage-based current control of
      saturated synchronous motors," IEEE Trans. Ind. Appl. 2019,
      https://doi.org/10.1109/TIA.2019.2919258

   :param pars: Control parameters.
   :type pars: InductionMotorVectorCtrlPars (or its subset)
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, i_s_ref, i_s)

      
      Compute the unlimited voltage reference.

      :param i_s_ref: Stator current reference.
      :type i_s_ref: complex
      :param i_s: Measured stator current.
      :type i_s: complex

      :returns: * **u_s_ref** (*complex*) -- Unlimited voltage reference.
                * **e** (*complex*) -- Error (scaled, corresponds to the leakage flux linkage).















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, e, u_s_ref, u_s_ref_lim, w_s)

      
      Update the integral state.

      :param e: Error (scaled, corresponds to the leakage flux linkage).
      :type e: complex
      :param u_s_ref: Unlimited voltage reference.
      :type u_s_ref: complex
      :param u_s_ref_lim: Limited voltage reference.
      :type u_s_ref_lim: complex
      :param w_s: Angular stator frequency.
      :type w_s: float















      ..
          !! processed by numpydoc !!


.. py:class:: SensorlessObserver(pars)

   Sensorless reduced-order flux observer.

   This observer corresponds to [3]_. The observer gain decouples the
   electrical and mechanical dynamics and allows placing the poles of the
   corresponding linearized estimation error dynamics. This implementation
   operates in estimated rotor flux coordinates.

   .. rubric:: Notes

   This implementation corresponds to (26)-(30) in [3]_ with the choice
   c = w_s**2 in (17). The closed-loop poles, cf. (40), can still be
   affected via the coefficient b > 0.

   .. rubric:: References

   .. [3] Hinkkanen, Harnefors, Luomi, "Reduced-order flux observers with
      stator-resistance adaptation for speed-sensorless induction motor
      drives," IEEE Trans. Power Electron., 2010,
      https://doi.org/10.1109/TPEL.2009.2039650

   :param pars: Control parameters.
   :type pars: InductionMotorVectorCtrlPars (or its subset)
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, u_s, i_s, _)

      
      Compute the output.

      :param u_s: Stator voltage in estimated rotor flux coordinates.
      :type u_s: complex
      :param i_s: Stator current in estimated rotor flux coordinates.
      :type i_s: complex
      :param _: Provides a compatible interface with the sensored observer.
      :type _: not used

      :returns: **w_s** -- Angular frequency of the rotor flux.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, i_s, w_s)

      
      Update the states for the next sampling period.
















      ..
          !! processed by numpydoc !!


.. py:class:: Observer(pars)

   Sensored reduced-order flux observer.

   This reduced-order flux observer [4]_ uses the measured rotor speed. The
   selected default gain allows smooth transition from the current model at
   zero speed to the (damped) voltage model at higher speeds.

   .. rubric:: Notes

   This implementation places the pole in synchronous coordinates at::

       s = -R_R/L_M - g*abs(w_m) - 1j*w_s

   The current model would be obtained using k = 1, resulting in the pole at
   s = -R_R/L_M - 1j*(w_s - w_m). The pure voltage model corresponds to k = 0,
   resulting in the marginally stable pole at s = -1j*w_s.

   .. rubric:: References

   .. [4] Verghese, Sanders, “Observers for flux estimation in induction
      machines,” IEEE Trans. Ind. Electron., 1988,
      https://doi.org/10.1109/41.3067

   :param pars: Control parameters.
   :type pars: InductionMotorVectorCtrlPars (or its subset)
















   ..
       !! processed by numpydoc !!

   .. py:method:: output(self, u_s, i_s, w_m)

      
      Compute the output of the observer.

      :param u_s: Stator voltage in estimated rotor flux coordinates.
      :type u_s: complex
      :param i_s: Stator current in estimated rotor flux coordinates.
      :type i_s: complex
      :param w_m: Rotor angular speed (in electrical rad/s)
      :type w_m: float

      :returns: **w_s** -- Angular frequency of the rotor flux.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, i_s, w_s)

      
      Update the states for the next sampling period.
















      ..
          !! processed by numpydoc !!


