:py:mod:`motulator.model.im`
============================

.. py:module:: motulator.model.im

.. autoapi-nested-parse::

   Continuous-time models for induction motors.

   Peak-valued complex space vectors are used. The space vector models are
   implemented in stator coordinates. The default values correspond to a 2.2-kW
   induction motor.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   motulator.model.im.InductionMotor
   motulator.model.im.SaturableStatorInductance
   motulator.model.im.InductionMotorSaturated
   motulator.model.im.InductionMotorInvGamma




.. py:class:: InductionMotor

   
   Γ-equivalent model of an induction motor.

   An induction motor is modeled using the Γ-equivalent model [R743146ac54e0-1]_. The model
   is implemented in stator coordinates.

   :param p: Number of pole pairs.
   :type p: int
   :param R_s: Stator resistance.
   :type R_s: float
   :param R_r: Rotor resistance.
   :type R_r: float
   :param L_ell: Leakage inductance.
   :type L_ell: float
   :param L_s: Stator inductance.
   :type L_s: float

   .. rubric:: Notes

   The Γ model is chosen here since it can be extended with the magnetic
   saturation model in a staightforward manner. If the magnetic saturation is
   omitted, the Γ model is mathematically identical to the inverse-Γ and T
   models [R743146ac54e0-1]_.

   .. rubric:: References

   .. [R743146ac54e0-1] Slemon, "Modelling of induction machines for electric drives," IEEE
      Trans. Ind. Appl., 1989, https://doi.org/10.1109/28.44251.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: p
      :annotation: :int = 2

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: R_s
      :annotation: :float = 3.7

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: R_r
      :annotation: :float = 2.5

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_ell
      :annotation: :float = 0.023

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_s
      :annotation: :float = 0.245

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: psi_ss0
      :annotation: :complex

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: psi_rs0
      :annotation: :complex

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: currents(self, psi_ss, psi_rs)

      
      Compute the stator and rotor currents.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param psi_rs: Rotor flux linkage.
      :type psi_rs: complex

      :returns: * **i_ss** (*complex*) -- Stator current.
                * **i_rs** (*complex*) -- Rotor current.















      ..
          !! processed by numpydoc !!

   .. py:method:: torque(self, psi_ss, i_ss)

      
      Compute the electromagnetic torque.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param i_ss: Stator current.
      :type i_ss: complex

      :returns: **tau_M** -- Electromagnetic torque.
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: f(self, psi_ss, psi_rs, u_ss, w_M)

      
      Compute the state derivatives.

      :param psi_ss: Stator flux linkage.
      :type psi_ss: complex
      :param psi_rs: Rotor flux linkage.
      :type psi_rs: complex
      :param u_ss: Stator voltage.
      :type u_ss: complex
      :param w_M: Rotor angular speed (in mechanical rad/s).
      :type w_M: float

      :returns: Time derivative of the state vector, [dpsi_ss, dpsi_rs]
      :rtype: complex list, length 2















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_currents(self)

      
      Measure the phase currents at the end of the sampling period.

      :returns: **i_s_abc** -- Phase currents.
      :rtype: 3-tuple of floats















      ..
          !! processed by numpydoc !!


.. py:class:: SaturableStatorInductance

   
   Stator inductance saturation model.

   This saturation model is given by [Rbf46b462ba88-2]_::

       L_s(psi_s) = L_su/(1 + (beta*abs(psi_s)**S)

   :param L_su: Unsaturated stator inductance.
   :type L_su: float
   :param beta: Positive coefficient.
   :type beta: float
   :param S: Positive coefficient.
   :type S: float

   .. rubric:: References

   .. [Rbf46b462ba88-2] Qu, Ranta, Hinkkanen, Luomi, "Loss-minimizing flux level control of
      induction motor drives," IEEE Trans. Ind. Appl., 2021,
      https://doi.org/10.1109/TIA.2012.2190818















   ..
       !! processed by numpydoc !!
   .. py:attribute:: L_su
      :annotation: :float = 0.34

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: beta
      :annotation: :float = 0.84

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: S
      :annotation: :float = 7.0

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: __call__(self, psi_s)

      
      :param psi_s: Stator flux linkage.
      :type psi_s: float or complex

      :returns: **L_s** -- Saturated value of the stator inductance.
      :rtype: float















      ..
          !! processed by numpydoc !!


.. py:class:: InductionMotorSaturated

   Bases: :py:obj:`InductionMotor`

   
   Γ-equivalent model of an induction motor model with main-flux saturation.

   This extends the InductionMotor class with a main-flux magnetic saturation
   model.

   :param L_s: Saturable stator inductance, L_s = L_s(psi_s)
   :type L_s: Callable[[float], float]















   ..
       !! processed by numpydoc !!
   .. py:attribute:: L_s
      :annotation: :collections.abc.Callable[[float], float]

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: currents(self, psi_ss, psi_rs)

      
      This method overrides the base class method.
















      ..
          !! processed by numpydoc !!


.. py:class:: InductionMotorInvGamma

   Bases: :py:obj:`InductionMotor`

   
   Inverse-Γ model of an induction motor.

   This extends the InductionMotor class (based on the Γ model) by providing
   the interface for the inverse-Γ model parameters. Linear magnetics are
   assumed. If magnetic saturation is to be modeled, the Γ model is preferred.

   :param p: Number of pole pairs.
   :type p: int
   :param R_s: Stator resistance.
   :type R_s: float
   :param R_R: Rotor resistance.
   :type R_R: float
   :param L_sgm: Leakage inductance.
   :type L_sgm: float
   :param L_M: Magnetizing inductance.
   :type L_M: float















   ..
       !! processed by numpydoc !!
   .. py:attribute:: R_R
      :annotation: :float = 2.1

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_sgm
      :annotation: :float = 0.021

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_M
      :annotation: :float = 0.224

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: R_r
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_ell
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: L_s
      :annotation: :float

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: __post_init__(self)

      
















      ..
          !! processed by numpydoc !!


