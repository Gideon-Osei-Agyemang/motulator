:py:mod:`motulator.model.mech`
==============================

.. py:module:: motulator.model.mech

.. autoapi-nested-parse::

   Continuous-time models for mechanical subsystems.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   motulator.model.mech.Mechanics




.. py:class:: Mechanics(J=0.015, tau_L_w=lambda w_M: 0, tau_L_t=lambda t: 0)

   
   Mechanics subsystem.

   This models an equation of motion for stiff mechanics.

   :param J: Total moment of inertia.
   :type J: float
   :param tau_L_w: Load torque as function of speed, `tau_L_w(w_M)`. For example,
                   tau_L_w = B*w_M, where B is the viscous friction coefficient.
   :type tau_L_w: function
   :param tau_L_t: Load torque as a function of time, `tau_L_t(t)`.
   :type tau_L_t: function















   ..
       !! processed by numpydoc !!
   .. py:method:: f(t, w_M, tau_M)

      
      Compute the state derivative.

      :param t: Time.
      :type t: float
      :param w_M: Rotor angular speed (in mechanical rad/s).
      :type w_M: float
      :param tau_M: Electromagnetic torque.
      :type tau_M: float

      :returns: Time derivative of the state vector.
      :rtype: list, length 2















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_speed()

      
      Measure the rotor speed.

      This returns the rotor speed at the end of the sampling period.

      :returns: **w_M0** -- Rotor angular speed (in mechanical rad/s).
      :rtype: float















      ..
          !! processed by numpydoc !!

   .. py:method:: meas_position()

      
      Measure the rotor angle.

      This returns the rotor angle at the end of the sampling period.

      :returns: **theta_M0** -- Rotor angle (in mechanical rad).
      :rtype: float















      ..
          !! processed by numpydoc !!


